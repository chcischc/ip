package capybara;

import capybara.command.Command;

/**
 * Entry point of the Capybara application.
 *
 * This class coordinates the initialization of the UI, storage, and task
 * list, and runs the main command loop until the user chooses to exit.
 * It also provides methods for GUI integration by returning responses
 * and welcome messages as strings.
 */
public class Capybara {
    private final Storage storage;
    private final TaskList tasks;
    private final Ui ui;
    private boolean lastExit = false;

    /**
     * Constructs a new Capybara instance with the given storage file path.
     *
     * @param filePath Path to the storage file where tasks are saved.
     */
    public Capybara(String filePath) {
        this.ui = new Ui();
        this.storage = new Storage(filePath);

        TaskList loaded;
        try {
            loaded = new TaskList(storage.load());
        } catch (Exception e) {
            ui.showError("capybara.Capybara squeaks… couldn’t load tasks from disk. Starting fresh.");
            loaded = new TaskList();
        }
        this.tasks = loaded;
    }

    /**
     * Runs the Capybara application in CLI mode.
     * <p>
     * Displays a welcome message, then enters a loop to read, parse,
     * and execute user commands until an exit command is received.
     * Errors are caught and shown to the user. Saves are attempted
     * after each command.
     */
    public void run() {
        ui.showWelcome();
        boolean isExit = false;
        while (!isExit) {
            try {
                String fullCommand = ui.readCommand();
                ui.showLine();
                Command c = Parser.parse(fullCommand);
                c.execute(tasks, ui, storage);
                isExit = c.isExit();
            } catch (CapyException e) {
                ui.showError(e.getMessage());
            } catch (java.io.IOException io) {
                ui.showError("capybara.Capybara slipped… couldn’t save tasks to disk.");
            } finally {
                ui.showLine();
            }
        }
        ui.close();
    }

    /**
     * Returns the chatbot’s response for the given input.
     * <p>
     * Used by the GUI to process a single user command and
     * return the output as a string.
     *
     * @param input The raw user command string.
     * @return The response generated by executing the command.
     */
    public String getResponse(String input) {
        BufferingUi bui = new BufferingUi();
        try {
            capybara.command.Command c = Parser.parse(input);
            lastExit = c.isExit();            // ByeCommand returns true here
            c.execute(tasks, bui, storage);   // prints goodbye via ui.showGoodbye()
        } catch (CapyException e) {
            bui.showError(e.getMessage());
        } catch (java.io.IOException io) {
            bui.showError("Capybara slipped… couldn’t save tasks to disk.");
        }
        return bui.flush();
    }

    /**
     * Returns the welcome message of the chatbot as a string.
     * <p>
     * Used by the GUI to display the initial greeting without
     * printing directly to the console.
     *
     * @return The welcome message.
     */
    public String getWelcome() {
        BufferingUi u = new BufferingUi();
        u.showWelcome();          // uses Ui.showWelcome(), which calls println(...) -> buffered
        return u.flush();
    }

    /**
     * Returns whether the last executed command was an exit command.
     *
     * @return {@code true} if the last command was exit, {@code false} otherwise.
     */
    public boolean lastWasExit() {
        return lastExit;
    }

    /**
     * Starts the Capybara application.
     * <p>
     * Creates a new instance with a default storage file and
     * runs it in CLI mode.
     *
     * @param args Command-line arguments (ignored).
     */
    public static void main(String[] args) {
        new Capybara("Data/taskStorage.txt").run();
    }
}
